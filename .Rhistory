install("LORD", force = TRUE)
prepareLinksDatabase()
install("LORD")
install("LORD", force=TRUE)
#' prepareLinksDatabase
#' Create a reference database of all TSS-TES link associations based on annotation
#' @param annotation reference annotation GenomicRanges object
#' @param tss.window window to consider distinct TSS
#' @param tes.window window to consider distinct TES
#'
#' @return promoterDatabase with classification of links
#' @export
#'
#' @examples prepareLinksDatabase(annotation.gr, 50,150)
prepareLinksDatabase <- function(annotation, tss.window, tes.window) {
strandSort <- function(x) {
c(
GenomicRanges::sort(x[x@strand == "+"], decreasing = FALSE),
GenomicRanges::sort(x[x@strand == "-"], decreasing = TRUE)
)
}
# Build 5'-3' links data base
# Exon ids
txdb <- GenomicFeatures::makeTxDbFromGRanges(annotation)
ebt <- GenomicFeatures::exonsBy(txdb, by = "tx", use.names = TRUE)
t2g <- AnnotationDbi::select(txdb,
keys = names(ebt),
keytype = "TXNAME",
columns = "GENEID")
e2 <- BiocGenerics::unlist(ebt)
e2$transcript_id <- names(e2)
e2$gene_id = t2g$GENEID[match(e2$transcript_id, t2g$TXNAME)]
e2$exon_id <- e2$exon_name
e2$exon_name <- NULL
e2$type <- "exon"
names(e2) <- NULL
mcols(e2) <- S4Vectors::mcols(e2)[, c("exon_id", "exon_rank",
"transcript_id", "gene_id", "type")]
bins <- list()
# TSS data base
# take first position per transcript and make it single nt
tss.bins  <-
strandSort(plyranges::mutate(plyranges::anchor_5p(dplyr::filter(e2, exon_rank ==
1)), width = 1))
# make unique TSS starts merging in a 50nt window.
cat("PrepTSSBase")
tss.base <-
strandSort(
GenomicRanges::makeGRangesFromDataFrame(
reshape::melt(GenomicRanges::reduce((
split(tss.bins, ~ gene_id)
),
min.gapwidth = tss.window)),
keep.extra.columns = TRUE
)
)
bins$tss.bins <- tss.bins
bins$tss.base <- tss.base
tss.base <-
tibble::as_tibble(tss.base)  %>%  dplyr::group_by(value.group_name) %>%
dplyr::mutate(count =  paste0(value.group_name, ":P", sprintf("%02d", sequence(dplyr::n(
))))) %>%
GenomicRanges::makeGRangesFromDataFrame(., keep.extra.columns = TRUE)
# annotate isoforms with promoter_id
ii <- GenomicRanges::findOverlaps(tss.bins, tss.base, maxgap = tss.window - 1)
tss.bins.annot <-
GenomicRanges::makeGRangesFromDataFrame(rbind(data.frame(tss.bins[queryHits(ii)],
tss.base[subjectHits(ii)])), keep.extra.columns = TRUE)
tss.bins.annot <-
tss.bins.annot %>% dplyr::mutate(transcript_id = transcript_id, promoter_id =
count) %>%
plyranges::select(gene_id, transcript_id, promoter_id)
# TES data base
# last exon per transcript
le <-
GenomicRanges::makeGRangesFromDataFrame(
e2 %>% group_by(transcript_id) %>% dplyr::filter(exon_rank  == max(exon_rank)),
keep.extra.columns = TRUE
)
tes.bins  <-
strandSort(plyranges::mutate(plyranges::anchor_3p(le), width = 1))
# make unique TSS starts merging in a 50nt window.
cat("PrepEndBase")
tes.base <-
strandSort (
GenomicRanges::makeGRangesFromDataFrame(
reshape::melt(GenomicRanges::reduce((
split(tes.bins, ~ gene_id)
),
min.gapwidth =
tes.window)),
keep.extra.columns = TRUE
)
)
tes.base <-
tibble::as.tibble(tes.base)  %>%  dplyr::group_by(value.group_name) %>%
dplyr::mutate(count =  paste0(value.group_name, ":TE", sprintf("%02d", sequence(dplyr::n(
))))) %>%
GenomicRanges::makeGRangesFromDataFrame(., keep.extra.columns = TRUE)
# assign tes_ids to isoforms
ii <- findOverlaps(tes.bins, tes.base, maxgap = tes.window - 1)
tes.bins.annot <-
GenomicRanges::makeGRangesFromDataFrame(rbind(data.frame(tes.bins[queryHits(ii)],
tes.base[subjectHits(ii)])), keep.extra.columns = TRUE)
tes.bins.annot <-
tes.bins.annot %>% dplyr::mutate(transcript_id = transcript_id, tes_id =count) %>%
plyranges::select(gene_id, transcript_id, tes_id)
bins$tes.bins <- tes.bins
bins$tes.base <- tes.base
# create link database
linksDbs <- dplyr::left_join(as.data.frame(tes.bins.annot),
as.data.frame(tss.bins.annot),
by = "transcript_id") %>%
dplyr::select(gene_id.x, transcript_id, promoter_id, tes_id) %>% dplyr::rename(gene_id = gene_id.x) %>%
dplyr::mutate(pairs_id = paste(promoter_id, gsub(".*:", "", tes_id), sep =":"))
# Classify promoter type and utr type
# sorted with proximal first distal later
# output: class all 3'end isoforms
le.sort <- strandSort(le)
tt <- linksDbs %>% dplyr::group_by(gene_id) %>%
dplyr::mutate(
utr_type = dplyr::case_when(
tes_id == min(tes_id) ~ "proximal",
tes_id == max(tes_id) ~ "distal",
TRUE ~ "other"
)
)
tt <- tt %>% group_by(gene_id) %>%
dplyr::mutate(
promoter_type = case_when(
promoter_id == min(promoter_id) ~ "distal",
promoter_id == max(promoter_id) ~ "proximal",
TRUE ~ "intermediate"
)
)
# classify APA-ATSS genes
# genes with more than 1 promoter different promoter
atss.gene <- tt %>% dplyr::distinct(promoter_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
apa.gene <- tt %>% dplyr::distinct(tes_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
tt <-
tt %>% dplyr::mutate(
tss.status = ifelse(gene_id %in% atss.gene, "ATSS", "single_promoter"),
apa.status = ifelse(gene_id %in% apa.gene, "APA", "noAPA")
)
# # # remove neibouring genes missassignments
tt$tes_gene <- gsub("\\:.*", "", tt$tes_id)
tt <- subset(tt, gene_id == tes_gene)
tt$tes_gene <- NULL
tt$promoter_gene <- gsub("\\:.*", "", tt$promoter_id)
tt <- subset(tt, gene_id == promoter_gene)
tt$promoter_gene <- NULL
bins$links <- tt
tt <- tt %>% dplyr::group_by(gene_id) %>%
dplyr::mutate(
utr_type = dplyr::case_when(
tes_id == min(tes_id) ~ "proximal",
tes_id == max(tes_id) ~ "distal",
TRUE ~ "other"
)
)
tt <- tt %>% group_by(gene_id) %>%
dplyr::mutate(
promoter_type = case_when(
promoter_id == min(promoter_id) ~ "distal",
promoter_id == max(promoter_id) ~ "proximal",
TRUE ~ "intermediate"
)
)
atss.gene <-  tt %>% dplyr::distinct(promoter_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
apa.gene <- tt %>% dplyr::distinct(tes_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
tt <-
tt %>% dplyr::mutate(
tss.status = ifelse(gene_id %in% atss.gene, "ATSS", "single_promoter"),
apa.status = ifelse(gene_id %in% apa.gene, "APA", "noAPA")
)
result <- list()
result$pairDataBase <- tt
result$TESCoordinate.bins <- tes.bins
result$TESCoordinate.base <- tes.base
result$TSSCoordinate.bins <- tss.bins
result$TSSCoordinate.base <- tss.base
return(result)
}
database <- prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
database
install("LORD")
install("LORD", force=TRUE)
install("LORD", force = TRUE)
devtools::load_all("LORD")
rm(list = c("prepareLinksDatabase"))
devtools::load_all("LORD")
source('~/Documents/Rdev/LORD/R/prepareLinksDatabase.R')
source('~/Documents/Rdev/LORD/R/prepareLinksDatabase.R')
devtools::load_all("LORD")
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
library(LORD)
data(embryoData, package = "LORD")
data(ensAnnot.r96, package = "LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
prepareLinksDatabase()
?prepareLinksDatabase()
source('~/Documents/Rdev/LORD/R/prepareLinksDatabase.R')
source('~/Documents/Rdev/LORD/R/prepareLinksDatabase.R')
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
rm(prepareLinksDatabase())
rm(prepareLinksDatabase)
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
library(LORD)
devtools::load_all("LORD")
devtools::load_all("LORD")
getwd()
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
split ( ensAnnot.r96, ~gene_id)
GenomicRanges::split ( ensAnnot.r96, ~gene_id)
#' prepareLinksDatabase
#' Create a reference database of all TSS-TES link associations based on annotation
#' @param annotation reference annotation GenomicRanges object
#' @param tss.window window to consider distinct TSS
#' @param tes.window window to consider distinct TES
#'
#' @return promoterDatabase with classification of links
#' @export
#'
#' @examples prepareLinksDatabase(annotation.gr, 50,150)
prepareLinksDatabase <- function(annotation, tss.window, tes.window) {
strandSort <- function(x) {
c(
GenomicRanges::sort(x[x@strand == "+"], decreasing = FALSE),
GenomicRanges::sort(x[x@strand == "-"], decreasing = TRUE)
)
}
# Build 5'-3' links data base
# Exon ids
txdb <- GenomicFeatures::makeTxDbFromGRanges(annotation)
ebt <- GenomicFeatures::exonsBy(txdb, by = "tx", use.names = TRUE)
t2g <- AnnotationDbi::select(txdb,
keys = names(ebt),
keytype = "TXNAME",
columns = "GENEID")
e2 <- BiocGenerics::unlist(ebt)
e2$transcript_id <- names(e2)
e2$gene_id = t2g$GENEID[match(e2$transcript_id, t2g$TXNAME)]
e2$exon_id <- e2$exon_name
e2$exon_name <- NULL
e2$type <- "exon"
names(e2) <- NULL
GenomicRanges::mcols(e2) <- GenomicRanges::mcols(e2)[, c("exon_id", "exon_rank",
"transcript_id", "gene_id", "type")]
bins <- list()
# TSS data base
# take first position per transcript and make it single nt
tss.bins  <-
strandSort(plyranges::mutate(plyranges::anchor_5p(dplyr::filter(e2, exon_rank ==
1)), width = 1))
# make unique TSS starts merging in a 50nt window.
cat("PrepTSSBase")
tss.base <-
strandSort(
GenomicRanges::makeGRangesFromDataFrame(
reshape::melt(GenomicRanges::reduce(
GenomicRanges::split(tss.bins, ~gene_id),
min.gapwidth = tss.window)),
keep.extra.columns = TRUE
)
)
bins$tss.bins <- tss.bins
bins$tss.base <- tss.base
tss.base <-
tibble::as_tibble(tss.base)  %>%  dplyr::group_by(value.group_name) %>%
dplyr::mutate(count =  paste0(value.group_name, ":P", sprintf("%02d", sequence(dplyr::n(
))))) %>%
GenomicRanges::makeGRangesFromDataFrame(., keep.extra.columns = TRUE)
# annotate isoforms with promoter_id
ii <- GenomicRanges::findOverlaps(tss.bins, tss.base, maxgap = tss.window - 1)
tss.bins.annot <-
GenomicRanges::makeGRangesFromDataFrame(rbind(data.frame(tss.bins[queryHits(ii)],
tss.base[subjectHits(ii)])), keep.extra.columns = TRUE)
tss.bins.annot <-
tss.bins.annot %>% dplyr::mutate(transcript_id = transcript_id, promoter_id =
count) %>%
plyranges::select(gene_id, transcript_id, promoter_id)
# TES data base
# last exon per transcript
le <-
GenomicRanges::makeGRangesFromDataFrame(
e2 %>% group_by(transcript_id) %>% dplyr::filter(exon_rank  == max(exon_rank)),
keep.extra.columns = TRUE
)
tes.bins  <-
strandSort(plyranges::mutate(plyranges::anchor_3p(le), width = 1))
# make unique TSS starts merging in a 50nt window.
cat("PrepEndBase")
tes.base <-
strandSort (
GenomicRanges::makeGRangesFromDataFrame(
reshape::melt(GenomicRanges::reduce((
GenomicRanges::split(tes.bins, ~ gene_id)
),
min.gapwidth =
tes.window)),
keep.extra.columns = TRUE
)
)
tes.base <-
tibble::as.tibble(tes.base)  %>%  dplyr::group_by(value.group_name) %>%
dplyr::mutate(count =  paste0(value.group_name, ":TE", sprintf("%02d", sequence(dplyr::n(
))))) %>%
GenomicRanges::makeGRangesFromDataFrame(., keep.extra.columns = TRUE)
# assign tes_ids to isoforms
ii <- findOverlaps(tes.bins, tes.base, maxgap = tes.window - 1)
tes.bins.annot <-
GenomicRanges::makeGRangesFromDataFrame(rbind(data.frame(tes.bins[queryHits(ii)],
tes.base[subjectHits(ii)])), keep.extra.columns = TRUE)
tes.bins.annot <-
tes.bins.annot %>% dplyr::mutate(transcript_id = transcript_id, tes_id =count) %>%
plyranges::select(gene_id, transcript_id, tes_id)
bins$tes.bins <- tes.bins
bins$tes.base <- tes.base
# create link database
linksDbs <- dplyr::left_join(as.data.frame(tes.bins.annot),
as.data.frame(tss.bins.annot),
by = "transcript_id") %>%
dplyr::select(gene_id.x, transcript_id, promoter_id, tes_id) %>% dplyr::rename(gene_id = gene_id.x) %>%
dplyr::mutate(pairs_id = paste(promoter_id, gsub(".*:", "", tes_id), sep =":"))
# Classify promoter type and utr type
# sorted with proximal first distal later
# output: class all 3'end isoforms
le.sort <- strandSort(le)
tt <- linksDbs %>% dplyr::group_by(gene_id) %>%
dplyr::mutate(
utr_type = dplyr::case_when(
tes_id == min(tes_id) ~ "proximal",
tes_id == max(tes_id) ~ "distal",
TRUE ~ "other"
)
)
tt <- tt %>% group_by(gene_id) %>%
dplyr::mutate(
promoter_type = case_when(
promoter_id == min(promoter_id) ~ "distal",
promoter_id == max(promoter_id) ~ "proximal",
TRUE ~ "intermediate"
)
)
# classify APA-ATSS genes
# genes with more than 1 promoter different promoter
atss.gene <- tt %>% dplyr::distinct(promoter_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
apa.gene <- tt %>% dplyr::distinct(tes_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
tt <-
tt %>% dplyr::mutate(
tss.status = ifelse(gene_id %in% atss.gene, "ATSS", "single_promoter"),
apa.status = ifelse(gene_id %in% apa.gene, "APA", "noAPA")
)
# # # remove neibouring genes missassignments
tt$tes_gene <- gsub("\\:.*", "", tt$tes_id)
tt <- subset(tt, gene_id == tes_gene)
tt$tes_gene <- NULL
tt$promoter_gene <- gsub("\\:.*", "", tt$promoter_id)
tt <- subset(tt, gene_id == promoter_gene)
tt$promoter_gene <- NULL
bins$links <- tt
tt <- tt %>% dplyr::group_by(gene_id) %>%
dplyr::mutate(
utr_type = dplyr::case_when(
tes_id == min(tes_id) ~ "proximal",
tes_id == max(tes_id) ~ "distal",
TRUE ~ "other"
)
)
tt <- tt %>% group_by(gene_id) %>%
dplyr::mutate(
promoter_type = case_when(
promoter_id == min(promoter_id) ~ "distal",
promoter_id == max(promoter_id) ~ "proximal",
TRUE ~ "intermediate"
)
)
atss.gene <-  tt %>% dplyr::distinct(promoter_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
apa.gene <- tt %>% dplyr::distinct(tes_id, .keep_all = TRUE) %>%
dplyr::group_by(gene_id) %>%  dplyr::filter(dplyr::n() > 1)  %>% dplyr::pull(gene_id)
tt <-
tt %>% dplyr::mutate(
tss.status = ifelse(gene_id %in% atss.gene, "ATSS", "single_promoter"),
apa.status = ifelse(gene_id %in% apa.gene, "APA", "noAPA")
)
result <- list()
result$pairDataBase <- tt
result$TESCoordinate.bins <- tes.bins
result$TESCoordinate.base <- tes.base
result$TSSCoordinate.bins <- tss.bins
result$TSSCoordinate.base <- tss.base
return(result)
}
rm(prepareLinksDatabase())
rm(prepareLinksDatabase)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::document()
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::document()
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
devtools::document()
devtools::load_all("../LORD")
prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
?countLinks()
countsLongReads  <- countLinks(embryoData, database)
devtools::document()
devtools::load_all("../LORD")
countsLongReads  <- countLinks(embryoData, database)
database <- prepareLinksDatabase(ensAnnot.r96, tss.window = 50, tes.window = 150)
database$TESCoordinate.bins
database$TESCoordinate.bins
database$TESCoordinate.base
lenth ( database$TESCoordinate.base )
length ( database$TESCoordinate.base )
countsLongReads  <- countLinks(embryoData, database)
devtools::document()
devtools::load_all("../LORD")
countsLongReads  <- countLinks(embryoData, database)
countsLongReads
estimateTranscriptionalBias()
?estimateTranscriptionalBias()
promoterDominance <- calculatePromoterDominance(countsLongReads)
promoterDominance <- calculatePromoterDominance(countsLongReads, database)
promoterDominance <- calculatePromoterDominance(countsLongReads, database$pairDataBase)
head(promoterDominance)
promoterDominance <- calculatePromoterDominance(countsLongReads, database$pairDataBase)
promoterDominance
table(is.na(promoterDominance$gene_id))
promoterDominance %>% filter(is.na(gene_id)) %>% summarize
promoterDominance %>% filter(is.na(gene_id)) %>% summarize(.)
promoterDominance %>% filter(is.na(gene_id)) %>% summaru(.)
promoterDominance %>% filter(is.na(gene_id)) %>% summary(.)
promoterDominance %>% filter(!is.na(gene_id)) %>% summary(.)
promoterDominance %>% filter!is.na(gene_id)) %>% summary(.)
#' Caculate promoter dominance
#'
#' @param countData counts data from 5'-3' links
#' @param pairsDataBase database of 5'-3' link isoforms
#'
#' @return
#' @export
#'
#' @examples
calculatePromoterDominance <- function(countData, pairsDataBase) {
annotPairsExp <-
left_join(
countData %>% dplyr::select(!gene_id),
pairsDataBase %>% dplyr::distinct(pairs_id, .keep_all = TRUE),
by = "pairs_id"
)
annotPairsExp <-
annotPairsExp %>% dplyr::group_by(tes_id) %>% dplyr::mutate(end_sum = sum(pairs_cpm)) %>%
group_by(promoter_id) %>% dplyr::mutate(start_sum = sum(pairs_cpm)) %>% dplyr::group_by(pairs_id) %>% dplyr::mutate(pairs_sum = sum(pairs_cpm)) %>%
group_by(gene_id) %>% mutate(geneMean = sum(pairs_cpm)) %>% dplyr::mutate(
promoterDominance = pairs_sum / end_sum,
endDominance = pairs_sum / start_sum,
endFraction = end_sum / geneMean,
startFraction = start_sum / geneMean
)
annotPairsExp <- annotPairsExp %>% dplyr::rename(readCounts=n) %>% mutate(pairType=ifelse(is.na(gene_id), "novelPair", "known"))
return(annotPairsExp)
}
estimateTranscriptionalBias(promoterDominance)
transcriptionalBias <- estimateTranscriptionalBias(promoterDominance, method = "fisher")
devtools::load_all("../LORD")
estimateTranscriptionalBias(promoterDominance)
rm(calculatePromoterDominance)
devtools::load_all("../LORD")
estimateTranscriptionalBias(promoterDominance, method = "fisher")
devtools::document()
devtools::load_all("../LORD")
estimateTranscriptionalBias(promoterDominance, method = "fisher")
devtools::document()
devtools::load_all("../LORD")
devtools::load_all("../LORD")
devtools::load_all("../LORD")
devtools::document()
devtools::load_all("../LORD")
devtools::load_all("../LORD/")
install("../LORD")
instal ("../LORD")
install("../LORD")
install("LORD")
library(devtools)
use_gpl_license()
