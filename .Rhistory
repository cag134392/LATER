return(x1)
})
couplingsmatrix <-
lapply(couplingsmatrix, function(x) {
x[is.na(x)] <- 0
x
})
# Add pseudocount
couplingsmatrix <- lapply(couplingsmatrix, function(x) {
x + 0.7
})
# For every per gene matrix perform chisq test and monte carlo simulation to obtain better p-value estimates.
if(method=="chisq"){
res <- list()
# make chisq test
perGeneChisqTest <- lapply(couplingsmatrix, function(x) {
chisqRes <- list()
x2 <- chisq.test(x, simulate.p.value = TRUE)
result <- data.frame(p.value = x2$p.value, x_squared = x2$statistic)
return(result)
})
# summarize genes
res$affectedGenes <-
as.data.frame(do.call(rbind, perGeneChisqTest)) %>%
dplyr::rename(p.value.chisq = 1) %>%
dplyr::mutate(gene_id = rownames(.))
res$affectedGenes$p.adj.chisq <-
p.adjust(res$affectedGenes$p.value.chisq , method = "BH")
res$affectedGenes <- res$affectedGenes %>%
dplyr::select(c(gene_id,
x_squared,
p.value.chisq,
p.adj.chisq))
#sqrt <-
#  as.data.frame(do.call(rbind,
#                        perGeneChisqTest$sum_sqrt)) %>%
# dplyr::rename(x_squared = 1) %>%
# dplyr::mutate(gene_id = rownames(.))
#res$affectedGenes <- left_join(res$affectedGenes,
#                              sqrt,
#                             by = "gene_id")
# get residuals per pair
residuals <- lapply(couplingsmatrix, function(x) {
td <- chisq.test(x, simulate.p.value = TRUE)
#x1 <- x2$residuals
tdo <- as.data.frame(td$observed) %>%
dplyr::mutate(new_junID=rownames(.))
tdo <- reshape2::melt( tdo) %>%
mutate(pairs_id = paste0(new_junID,":",variable)) %>%
dplyr::select(pairs_id, value) %>%
dplyr::rename(observed=value)
tde <- as.data.frame(td$expected) %>%
dplyr::mutate(new_junID=rownames(.))
tde <- reshape2::melt( tde) %>%
mutate(pairs_id = paste0(new_junID,":",variable)) %>%
dplyr::select(pairs_id, value) %>%
dplyr::rename(expected=value)
tdr <- as.data.frame(td$residuals) %>%
dplyr::mutate(new_junID=rownames(.))
tdr <- reshape2::melt( tdr) %>%
dplyr::mutate(pairs_id = paste0(new_junID,":",variable),
gene_id=gsub("\\:.*","",new_junID) ) %>%
dplyr::select(pairs_id, value, gene_id) %>%
dplyr::rename(residuals=value)
d<- left_join(tdo, tde, by="pairs_id")
d<- left_join(d, tdr, by="pairs_id")
return(d)
}
)
res$stats <- residuals %>% do.call(rbind,.) %>%
group_by(gene_id) %>%
arrange(gene_id)
return(res)
}else{
# For every per gene matrix perform fisher test and monte carlo simulation to obtain better p-value estimates.
perGeneFisher <- lapply(couplingsmatrix, function(x) {
res.fish <- fisher.test(x, simulate.p.value = TRUE)
res.fish <- res.fish$p.value
return(res.fish)
})
resFisher <-
as.data.frame(do.call(rbind, perGeneFisher)) %>%
dplyr::rename(p.value.fisher =1) %>%
dplyr::mutate(gene_id = rownames(.))
resFisher$p.adj.fisher <-
p.adjust(resFisher$p.value.fisher , method = "BH")
return(resFisher)
}
}
estimateTranscriptionalBias(a, method = "chisq")
#' estimateTranscriptionalBias
#' transcriptional bias estimates as in (Alfonso-Gonzalez, C, et al., 2022)
#' @param promoterDominanceTable Table of promoter dominance summaring transcript pairs expression
#' @param method option "chisq" or "fisher" test
#'
#' @return table of significantly biased genes
#' @export
#'
#' @examples
estimateTranscriptionalBias  <-
function(promoterDominanceTable, method) {
apa.genes <-
promoterDominanceTable %>%
distinct(tes_id, .keep_all = TRUE) %>%
group_by(gene_id) %>%
filter(n() > 1) %>%
pull(gene_id)
atss.genes <-
promoterDominanceTable %>%
distinct(promoter_id, .keep_all = TRUE) %>%
group_by(gene_id) %>%
filter(n() > 1) %>%
pull(gene_id)
atss.apa.genes <- intersect(apa.genes, atss.genes)
headData <-
promoterDominanceTable %>%
filter(gene_id %in% atss.apa.genes) %>%
dplyr::select(gene_id, tes_id, pairs_cpm, promoter_id)
perGeneList <- split(headData, f = headData$gene_id)
couplingsmatrix <- lapply(perGeneList, function(x) {
# Produce combination matrix of every TES and Promoter of the gene
x1 <- x %>%
maditr::dcast(tes_id ~ promoter_id, value.var = "pairs_cpm") %>%
as.data.frame(.)
rownames(x1) <- x1$tes_id
x1$tes_id <- NULL
return(x1)
})
couplingsmatrix <-
lapply(couplingsmatrix, function(x) {
x[is.na(x)] <- 0
x
})
# Add pseudocount
couplingsmatrix <- lapply(couplingsmatrix, function(x) {
x + 0.7
})
# For every per gene matrix perform chisq test and monte carlo simulation to obtain better p-value estimates.
if(method=="chisq"){
res <- list()
# make chisq test
perGeneChisqTest <- lapply(couplingsmatrix, function(x) {
chisqRes <- list()
x2 <- chisq.test(x, simulate.p.value = TRUE)
result <- data.frame(p.value = x2$p.value, x_squared = x2$statistic)
return(result)
})
# summarize genes
res$affectedGenes <-
as.data.frame(do.call(rbind, perGeneChisqTest)) %>%
dplyr::rename(p.value.chisq = 1) %>%
dplyr::mutate(gene_id = rownames(.))
res$affectedGenes$p.adj.chisq <-
p.adjust(res$affectedGenes$p.value.chisq , method = "BH")
res$affectedGenes <- res$affectedGenes %>%
dplyr::select(c(gene_id,
x_squared,
p.value.chisq,
p.adj.chisq)) %>%
group_by(gene_id) %>%
arrange(gene_id)
#sqrt <-
#  as.data.frame(do.call(rbind,
#                        perGeneChisqTest$sum_sqrt)) %>%
# dplyr::rename(x_squared = 1) %>%
# dplyr::mutate(gene_id = rownames(.))
#res$affectedGenes <- left_join(res$affectedGenes,
#                              sqrt,
#                             by = "gene_id")
# get residuals per pair
residuals <- lapply(couplingsmatrix, function(x) {
td <- chisq.test(x, simulate.p.value = TRUE)
#x1 <- x2$residuals
tdo <- as.data.frame(td$observed) %>%
dplyr::mutate(new_junID=rownames(.))
tdo <- reshape2::melt( tdo) %>%
mutate(pairs_id = paste0(new_junID,":",variable)) %>%
dplyr::select(pairs_id, value) %>%
dplyr::rename(observed=value)
tde <- as.data.frame(td$expected) %>%
dplyr::mutate(new_junID=rownames(.))
tde <- reshape2::melt( tde) %>%
mutate(pairs_id = paste0(new_junID,":",variable)) %>%
dplyr::select(pairs_id, value) %>%
dplyr::rename(expected=value)
tdr <- as.data.frame(td$residuals) %>%
dplyr::mutate(new_junID=rownames(.))
tdr <- reshape2::melt( tdr) %>%
dplyr::mutate(pairs_id = paste0(new_junID,":",variable),
gene_id=gsub("\\:.*","",new_junID) ) %>%
dplyr::select(pairs_id, value, gene_id) %>%
dplyr::rename(residuals=value)
d<- left_join(tdo, tde, by="pairs_id")
d<- left_join(d, tdr, by="pairs_id")
return(d)
}
)
res$stats <- residuals %>% do.call(rbind,.) %>%
group_by(gene_id) %>%
arrange(gene_id)
return(res)
}else{
# For every per gene matrix perform fisher test and monte carlo simulation to obtain better p-value estimates.
perGeneFisher <- lapply(couplingsmatrix, function(x) {
res.fish <- fisher.test(x, simulate.p.value = TRUE)
res.fish <- res.fish$p.value
return(res.fish)
})
resFisher <-
as.data.frame(do.call(rbind, perGeneFisher)) %>%
dplyr::rename(p.value.fisher =1) %>%
dplyr::mutate(gene_id = rownames(.))
resFisher$p.adj.fisher <-
p.adjust(resFisher$p.value.fisher , method = "BH")
return(resFisher)
}
}
estimateTranscriptionalBias(a, method = "chisq")
#'
#' @slot result data.frame.
#' @slot stats data.frame.
#' @slot readAssignments data.frame.
#' @slot isoformCounts data.frame.
#' @importFrom GenomicRanges GRanges dplyr
#' @return
#' @exportClass LATER
#'
#' @examples
setClass("LATER", slots = c(
result = "data.frame",
stats = "data.frame",
dominance = "data.frame",
readAssignments = "data.frame",
isoformCounts = "data.frame"
),
prototype = list(
result = data.frame(),
stats = data.frame(),
dominance = data.frame(),
readAssignments = data.frame(),
isoformCounts = data.frame()
)
)
#'
#' @param result
#' @param stats
#' @param readAssignments
#' @param isoformCounts
#'
#' @return
#' @export
#'
#' @examples
LATER <-
function(result = data.frame(),
stats = data.frame(),
dominance = data.frame(),
readAssignments = data.frame(),
isoformCounts = data.frame()) {
new(
"LATER",
result = result,
stats = stats,
dominance = dominance,
readAssignments = readAssignments,
isoformCounts = isoformCounts
)
}
estimateTranscriptionalBias(a, method = "chisq")
estimatePromoterDominance <- function(LATER, IsoformDatabase) {
dominance <- calculatePromoterDominance(LATER, IsoformDatabase)
transcriptional_bias <- estimateTranscriptionalBias
LATER <- LATER(dominance = dominance,
result = transcriptional_bias$affectedGenes,
stats = transcriptional_bias$stats)
return(LATER)
}
estimateTranscriptionalBias(a, method = "chisq")
d1
dd1
dd1 <- countLinks(bamPath, isoforms_database)
estimatePromoterDominance(dd1, isoforms_database)
estimatePromoterDominance <- function(LATER, IsoformDatabase) {
dominance <- calculatePromoterDominance(LATER, IsoformDatabase)
transcriptional_bias <- estimateTranscriptionalBias(dominance, "chisq")
LATER <- LATER(dominance = dominance,
result = transcriptional_bias$affectedGenes,
stats = transcriptional_bias$stats)
return(LATER)
}
estimatePromoterDominance(dd1, isoforms_database)
estimatePromoterDominance <- function(LATER, IsoformDatabase) {
dominance <- calculatePromoterDominance(LATER, IsoformDatabase)
transcriptional_bias <- estimateTranscriptionalBias(dominance, "chisq")
dominance(LATER) <- dominance
result(LATER) <- transcriptional_bias$affectedGenes
stats(LATER) <- transcriptional_bias$stats
return(LATER)
}
estimatePromoterDominance(dd1, isoforms_database)
setGeneric("stats",
function(x) standardGeneric("stats"))
setMethod("stats", "LATER",
function(x) x@stats)
setGeneric("dominance",
function(x) standardGeneric("dominance"))
setMethod("dominance", "LATER",
function(x) x@dominance)
setGeneric("result<-",
function(x, value) standardGeneric("result<-"))
setMethod("result<-", "LATER", function(x, value) {
x@result <- value
validObject(x)
x
})
setGeneric("stats<-",
function(x, value) standardGeneric("stats<-"))
setMethod("stats<-", "LATER", function(x, value) {
x@stats <- value
validObject(x)
x
})
setGeneric("dominance<-",
function(x, value) standardGeneric("dominance<-"))
setMethod("dominance<-", "LATER", function(x, value) {
x@dominance <- value
validObject(x)
x
})
estimatePromoterDominance(dd1, isoforms_database)
bamPath <- system.file("exdata/testBam.bam", package = 'LATER')
bamAlignments <- GenomicAlignments::readGAlignments(bamPath, use.names = TRUE)
bamAlignments
hist(bamAlignments$width)
hist(bamAlignments@width)
mcols(bamAlignments)
width(bamAlignments)
hist(width(bamAlignments))
ref_path <- system.file("exdata/dmel_reference_annotation.gtf.gz",
package = 'LATER')
reference_annotation <- rtracklayer::import.gff(ref_path)
library(devtools)
library(devtools)
load_all()
library(devtools)
devtools::load_all()
devtools::load_all()
library(devtools)
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
devtools::load_all()
library(devtools)
install.packages(devtools, force = TRUE)
install.packages("devtools", force = TRUE)
library(devtools)
library(devtools)
install.packages("later")
library(devtools)
devtools::load_all()
check()
check()
devtools::load_all()
setGeneric("showGene", function(x,GENE_ID) standardGeneric("showGene"))
e
setMethod("showGene", "IsoformDatabase", function(x, GENE_ID) {
showLinks(x) <- showLinks(x) %>% filter(gene_id %in% GENE_ID)
TESCoordinate.bins(x) <- TESCoordinate.bins(x) %>% filter(gene_id %in% GENE_ID)
TESCoordinate.base(x) <- TESCoordinate.base(x) %>% filter(gene_id %in% GENE_ID)
TSSCoordinate.bins(x) <- TSSCoordinate.bins(x) %>% filter(gene_id %in% GENE_ID)
TSSCoordinate.base(x) <- TSSCoordinate.base(x) %>% filter(gene_id %in% GENE_ID)
return(x)
})
setMethod("showGene", "IsoformDatabase", function(x, GENE_ID) {
showLinks(x) <- showLinks(x) %>% filter(gene_id %in% GENE_ID)
TESCoordinate.bins(x) <- TESCoordinate.bins(x) %>% filter(gene_id %in% GENE_ID)
TESCoordinate.base(x) <- TESCoordinate.base(x) %>% filter(gene_id %in% GENE_ID)
TSSCoordinate.bins(x) <- TSSCoordinate.bins(x) %>% filter(gene_id %in% GENE_ID)
TSSCoordinate.base(x) <- TSSCoordinate.base(x) %>% filter(gene_id %in% GENE_ID)
return(x)
})
setGeneric("showGene", function(x,GENE_ID) standardGeneric("showGene"))
setMethod("showGene", "IsoformDatabase", function(x, GENE_ID) {
showLinks(x) <- showLinks(x) %>% filter(gene_id %in% GENE_ID)
TESCoordinate.bins(x) <- TESCoordinate.bins(x) %>% filter(gene_id %in% GENE_ID)
TESCoordinate.base(x) <- TESCoordinate.base(x) %>% filter(gene_id %in% GENE_ID)
TSSCoordinate.bins(x) <- TSSCoordinate.bins(x) %>% filter(gene_id %in% GENE_ID)
TSSCoordinate.base(x) <- TSSCoordinate.base(x) %>% filter(gene_id %in% GENE_ID)
return(x)
})
devtools::load_all()
devtools::load_all()
devtools::load_all()
check()
check()
check()
load_all()
load_all()
rm(showGene())
rm(showGene)
load_all()
check()
check()
install.packages("roxygen2", version = "7.1.2")
check()
remove.packages("roxygen2")
install.packages("roxygen2", version = "7.1.2")
check()
library(devtools)
check()
packageVersion("roxygen2")
remove.packages("roxygen2")
packageVersion("roxygen2")
install.packages("roxygen2", version = "7.1.2")
remove.packages("roxygen2")
install.packages("roxygen2", version = "7.1.2")
check()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
check()
library(devtools)
check()
check()
library(devtools)
check()
check()
check()
check()
check()
load_all()
load_all()
load_all()
load_all()
check()
check()
load_all()
load_all()
check()
load_all()
load_all()
check()
check()
load_all()
load_all()
check()
check()
load_all()
check()
load_all()
load_all()
check()
load_all()
check()
check()
load_all()
library(dplyr)
library(devtools)
load_all()
load_all()
check()
library(devtools)
load_all()
load_all()
check()
check()
check()
load_all()
load_all()
check()
load_all()
library(devtools)
load_all()
check()
prepareIsoformDatabase()
load_all()
check()
library(devtools)
load_all()
check()
check()
check()
check()
load_all()
check()
load_all()
check()
load_all()
check()
check()
check()
check()
library(devtools)
check()
pkgbuild::check_build_tools(debug = TRUE)
install.packages("test.that")
install.packages("testthat")
pkgbuild::check_build_tools(debug = TRUE)
library(devtool)
library(devtools)
load_all()
load_all()
load_all()
check_all
check_all()
check()
check_all()
check()
check(vignettes = FALSE)
check(vignettes = FALSE)
